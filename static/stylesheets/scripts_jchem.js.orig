var marvinSketcherInstance;


//Url mapping for ubertool-cts web services:
var Urls = {

  getChemDetails : "/jchem-cts/ws/getChemDetails/",
  convertToSMILES : "/jchem-cts/ws/convertToSMILES/",
  getChemSpecData : "/jchem-cts/ws/getChemSpecData/",
  standarizer : "/jchem-cts/ws/standardizer/"

};


$(document).ready(function handleDocumentReady (e) {

  var p = MarvinJSUtil.getEditor("#sketch");
  p.then(function (sketcherInstance) {
    marvinSketcherInstance = sketcherInstance;
    // initControl(); //binds action to initControl() function
  }, function (error) {
    alert("Cannot retrieve sketcher instance from iframe:"+error);
  });  

  $('#setSmilesButton').on('click', importMol); // map button click to function
  $('#getSmilesButton').on('click', importMolFromCanvas);

  //Makes error message font red, then back to normal when focused
  $('#id_chem_struct')
    .focusin(function() {
      if ($(this).hasClass('redFont')) {
        $(this).removeClass("redFont").val("");
      }
  });

  var browserWidth = $(window).width();
  var browserHeight = $(window).height();
  var winleft = (browserWidth / 2) - 220 + "px";
  var wintop = (browserHeight / 2) - 30 + "px";

});


//Gets formula, iupac, smiles, mass, and marvin structure 
//for chemical in Lookup Chemical textarea
function importMol(dataObj) {

  var chemical = $('#id_chem_struct').val();

  if (chemical == "") {
    displayErrorInTextbox("Enter a chemical or draw one first");
  }

  //Returns <xml> string of standardized chemical in <cml> format for MarvinJS:
  var standardizerResult = callStandardizer(chemical);

  if (containsErrors(standardizerResult)) {
    displayErrorInTextbox();
    return;
  }

  smilesObj = callMrvToSmiles(standardizerResult);

  if (containsErrors(smilesObj)) {
    displayErrorInTextbox();
    return;
  }

  smiles = smilesObj['structure'];

  //Create POST data for web call:
  params = new Object();
  params.url = Urls.getChemDetails;
  params.type = "POST";
  params.contentType = "application/json";
  params.dataType = "json";
  params.data = { "chemical" : smiles };

  results = ajaxCall(params); //Get chemical information

  if (containsErrors(results)) {
    displayErrorInTextbox();
    return;
  }
  else {
    data = results.data[0];
    populateResultsTbl(data);
    //Load chemical to marvin sketch:
    marvinSketcherInstance.importStructure("mrv", data.structureData.structure); 
  }
}


//Gets smiles, iupac, formula, mass for chemical 
//drawn in MarvinJS
function importMolFromCanvas() {

  marvinSketcherInstance.exportStructure("mrv").then(function(source) {

    if (source == '<cml><MDocument></MDocument></cml>') {
      alert("Draw a chemical, then try again");
      return;
    }

    var params = new Object();
    // params.url = "test";
    params.url = Urls.convertToSMILES;
    params.type = "POST";
    params.contentType = "application/json";
    params.dataType = "json";
    params.data = { "chemical" : source };

    var results = ajaxCall(params);

    if (results == 'Fail') {
      alert("Error getting data from server...");
      return;
    }
    else {
      // importMol(results["structure"]); //send data object 
      params = new Object();
      params.url = Urls.getChemDetails;
      params.type = "POST";
      params.contentType = "application/json";
      params.dataType = "json";
      params.data = {"chemical": results.structure};
      results = ajaxCall(params);
      populateResultsTbl(results.data[0]);
    }

  });
}


function callStandardizer(chemical) {
  //Forms request to call standardizer:
  var params = new Object();
  params.url = Urls.standarizer;
  params.type = "POST";
  params.contentType = "plain/text";
  params.dataType = "text";
  params.data = { "chemical" : chemical };

  var results = ajaxCall(params);

  if (containsErrors(results)) {
    displayErrorInTextbox();
    return;
  }
  else {
    return results;
  }
}


function callMrvToSmiles(chemical) {
  //Forms request to call convertToSMILES:
  var params = new Object();
  params.url = Urls.convertToSMILES;
  params.type = "POST";
  params.contentType = "application/json";
  params.dataType = "json";
  params.data = { "chemical" : chemical };

  var results = ajaxCall(params);

  if (containsErrors(results)) {
    displayErrorInTextbox();
    return;
  }
  else {
    return results;
  }
}


function containsErrors(results) {
  //Check results for a multitude of errors:
  if (typeof results === "undefined") {
    return true;
  }
  else if (results == "Fail") {
    return true;
  }
  else if (typeof results === "object") {
    $.each(results, function(key, value) {
      if (value.hasOwnProperty("error")) {
        return true;
      }
    });
  }
  else if (typeof results === "string") {
    if (~results.indexOf("error")) {
      return true;
    }
  }
  else {
    return false;
  }
}


function populateResultsTbl(data) {
  //Populates Results textboxes with data:
  $('#id_chem_struct').val(data["smiles"]); //Enter SMILES txtbox
  $('#molecule').val(data["smiles"]); //SMILES string txtbox - results table
  $('#IUPAC').val(data["iupac"]); //IUPAC txtbox - results table
  $('#formula').val(data["formula"]); //Formula txtbox - results table
  $('#weight').val(data["mass"]); //Mass txtbox - results table
}


function displayErrorInTextbox(errorMessage) {
  //Displays error message in Lookup Chemical textbox

  if (typeof errorMessage === 'undefined' || errorMessage == "") {
    errorMessage = "Error retrieving chemical information...Check chemical and try again.";
  }

  $('#id_chem_struct').addClass("redFont");
  $('#id_chem_struct').val(errorMessage); //Enter SMILES txtbox
  $('#molecule').val(""); //SMILES string txtbox - results table
  $('#IUPAC').val(""); //IUPAC txtbox - results table
  $('#formula').val(""); //Formula txtbox - results table
  $('#weight').val(""); //Mass txtbox - results table

  marvinSketcherInstance.clear(); //clear marvin sketch

}


function jsonRepack(jsonobj) {
  return JSON.parse(JSON.stringify(jsonobj));
}


function ajaxCall(params) {

  var results = "";

  $.ajax({

      url : params.url,
      type : params.type,
      data : params.data,
      dataType : params.dataType,
      timeout: 1000,
      async: false,

      success : function(data, textStatus, callBack) {
        results = jsonRepack(data);
        // return results;
        // var data = results.data[0];
      },
      error : function(jqXHR, textStatus, errorThrown) {
        results = "Fail ";
        console.log(" " + JSON.stringify(errorThrown));
        alert("Error retrieving chemical information. Please try again.");
      },

  });

  return results;

}